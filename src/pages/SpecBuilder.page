<apex:page title="Specification Builder" controller="SpecificationController" action="{!init}">
	<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js" />
	<script type="text/javascript">

var	$j = jQuery.noConflict()
	specificationId = '{!specificationId}';

function remoteCall( remote_method, parameter, callback ){

	remote_method( parameter, function( result, event ){

		if( event.status ){
			callback( $j('<div>').html( result ).text() );
		}
		else{
			console.log( event.message );
		}
	});
}

function loadName( callback ){

	remoteCall( Spec.SpecificationController.getName, specificationId, callback );
}

function loadType( callback ){

	remoteCall( Spec.SpecificationController.getType, specificationId, callback );
}

function loadSpecification( callback ){

	remoteCall( Spec.SpecificationController.getSpecification, specificationId, callback );
}

function updateSpecification( specificationJson, callback ){

	var specificationString = JSON.stringify( specificationJson );
	Spec.SpecificationController.setSpecification( specificationId, specificationString, function( result, event ){

		if( !event.status ){

			console.log( event.message );
		}
		else {
			callback( $j('<div>').html( result ).text() );
		}
	});
}

function saveSpecification(){

	var specification = serializeSpec( $j('.spec_node').first() );
	updateSpecification( specification, displaySpecification );
}

function displaySpecification( specificationString ){

	console.log( specificationString );

	var specification = $j.parseJSON( specificationString );

	if( specification ){

		console.log( specification );

		renderSpec( specification, $j('#specification_container').empty() );
	}
}

function serializeSpec( $node ){

	var specification;

	if( $node.hasClass('spec_node') ){

		specification = {};

		if( $node.hasClass('and_node') || $node.hasClass('or_node') ){

			if( $node.hasClass('and_node') ){

				specification.node = 'and';
			}
			else {

				specification.node = 'or';
			}

			specification.specifications = [];

			$node.children('ul').children().each(function( index, element ){

				specification.specifications[ index ] = serializeSpec( $j(element).find('.spec_node') );
			});
		}
		else if( $node.hasClass('type_node') ){

			specification.node = 'type';
			specification.type = $node.data('type');
		}
		else if( $node.hasClass('flt_node') || $node.hasClass('flte_node') ){

			if( $node.hasClass('flt_node') ){

				specification.node = 'flt';
			}
			else if( $node.hasClass('flte_node') ){

				specification.node = 'flte';
			}

			specification.field = $node.data('field');
			specification.value = $node.data('value');
		}
		else{

			specification.node = 'unknown';
		}
	}

	return specification;
}

function renderSpec( specification, $container ){

	var $new_div = $j('<div>').addClass('spec_node'), $list, $list_el;

	if( 'and' === specification.node || 'or' === specification.node ){
		if( 'and' === specification.node ){

			$new_div.text('And')
				.addClass('and_node');
		}
		else{

			$new_div.text('Or')
				.addClass('or_node');
		}

		$list = $j('<ul>');

		$j.each( specification.specifications, function( index, element ){

			$list_el = $j('<li>');
			renderSpec( element, $list_el );
			$list.append( $list_el );
		});

		$new_div.append( $list );
	}
	else if( 'type' === specification.node ){

		$new_div.text( 'Type: ' + specification.type )
			.addClass('type_node')
			.data( 'type', specification.type );
	}
	else if( 'flt' === specification.node ){

		$new_div.text( specification.field + ' < ' + specification.value )
			.addClass('flt_node')
			.data( 'field', specification.field )
			.data( 'value', specification.value );
	}
	else if( 'flte' === specification.node ){

		$new_div.text( specification.field + ' <= ' + specification.value )
			.addClass('flte_node')
			.data( 'field', specification.field )
			.data( 'value', specification.value );
	}

	$new_div.appendTo( $container );
}

$j(function(){

	if( '' != specificationId ){

		var specification = loadSpecification( displaySpecification );
		loadType(function(type){
			$j('[id$="object_select"]').val( type.toLowerCase() );
		});
		loadName(function(name){
			$j('#specification_name').val( name );
		});
	}

});

	</script>
	<input type="text" id="specification_name" />
	<apex:form >
		<apex:selectList id="object_select" size="1">
			<apex:selectOptions value="{!sObjectTypes}" />
		</apex:selectList>
	</apex:form>
	<div id="specification_container">
	</div>
</apex:page>