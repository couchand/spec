<apex:page title="Specification Builder" controller="SpecificationController" action="{!init}">
	<style>

#specification h3 {

	display: block;
	margin-top: 10px;
	margin-bottom: 5px;
}

#specification ul {

	padding-left: 40px;
}

#specification input,
#specification select {

	margin-left: 40px;
}


#specification_palette {

	position:fixed;
	bottom: 0;
	right: 0;
	width: 400px;
	height: 190px;
	background-color: white;
	z-index: 9999;
}

#specification_palette .type {

	border: thin solid black;
	width: 100%;
	padding: 2px 0 3px 5px;
	margin-bottom: 3px;
}

#specification_palette .example {

	padding: 2px 0 2px 10px;
	margin-top: 2px;
	background-color: lightGray;
	position: relative;
}

#specification_palette .example .handle {

	position: absolute;
	left: -25px;
	width: 26px;
	top: 0px;
	height: 100%;
	font-size: 25px;
	padding-left: 3px;
}

.handle {

	cursor: pointer;
}

#specification_palette .example:hover .handle {

	background-color: lightGray;
}

#specification_palette input {
	width: 100px;
}

	</style>

	<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js" />
	<script type="text/javascript">

var	$j = jQuery.noConflict(),
	specificationId = '{!specificationId}';

function remoteCallJson( remote_method, parameter, callback ){

	remoteCall( remote_method, parameter, callback, function(i){ return i; } );
}

function remoteCall( remote_method, parameter, callback, escape ){

	if( 'undefined' === typeof escape ){

		escape = function( result ){

			return $j('<div>').html( result ).text();
		};
	}

	remote_method( parameter, function( result, event ){

		if( event.status ){
			callback( escape( result ) );
		}
		else{
			console.log( event.message );
		}
	});
}

function loadName( callback ){

	remoteCall( Spec.SpecificationController.getName, specificationId, callback );
}

function loadType( callback ){

	remoteCall( Spec.SpecificationController.getType, specificationId, callback );
}

function loadSpecification( callback ){

	remoteCallJson( Spec.SpecificationController.getSpecification, specificationId, callback );
}

function loadFields( sObjectType, callback ){

	remoteCallJson( Spec.SpecificationController.getSObjectFields, sObjectType, callback );
}

function updateSpecification( specificationJson, callback ){

	var specificationString = JSON.stringify( specificationJson );
	Spec.SpecificationController.setSpecification( specificationId, specificationString, function( result, event ){

		if( !event.status ){

			console.log( event.message );
		}
		else {
			callback( result );
		}
	});
}

function logBoth( a, b ){

	console.log(a);
	console.log(b);
}

function saveSObjectType(){

	var type = $j('#object_select').val();

	Spec.SpecificationController.setSObjectType( specificationId, type, logBoth );
	refreshFieldList( type );
}

function saveName(){

	var name = $j('#specification_name').val();

	Spec.SpecificationController.setName( specificationId, name, logBoth );
}

function saveSpecification(){

	var specification  = {};
	specification.node = 'and';
	specification.specifications = [];

	$j('#specification_container').children('ul').children('li').each(function(){
		specification.specifications.push( serializeSpec( $j(this).children('.spec_node') ) );
	});

	updateSpecification( specification, displaySpecification );
}

function displaySpecification( specification ){

	if( specification && 'and' === specification.node ){

		console.log( specification );

		$j('#specification_container').empty().append( buildCompositeList( specification.specifications ) );
	}
	else {

		console.log('Illegal specification.  Unable to render');
	}
}

function serializeSpec( $node ){

	var specification;

	if( $node.hasClass('spec_node') ){

		specification = {};

		if( $node.hasClass('and_node') || $node.hasClass('or_node') ){

			if( $node.hasClass('and_node') ){

				specification.node = 'and';
			}
			else {

				specification.node = 'or';
			}

			specification.specifications = [];

			$node.children('ul').children().each(function( index, element ){

				specification.specifications[ index ] = serializeSpec( $j(element).find('.spec_node') );
			});
		}
		else if( $node.hasClass('type_node') ){

			specification.node = 'type';
			specification.type = $node.data('type');
		}
		else if( $node.hasClass('flt_node') || $node.hasClass('flte_node') ){

			if( $node.hasClass('flt_node') ){

				specification.node = 'flt';
			}
			else if( $node.hasClass('flte_node') ){

				specification.node = 'flte';
			}

			specification.field = $node.data('field');
			specification.value = $node.data('value');
		}
		else{

			specification.node = 'unknown';
		}
	}

	return specification;
}

function buildCompositeList( specifications ){

	var $list = $j('<ul>'), $list_el;

	$j.each( specifications, function( index, element ){

		$list_el = $j('<li>');
		renderSpec( element, $list_el );
		$list.append( $list_el );
	});

	return $list;
}

function renderSpec( specification, $container ){

	var $new_div = $j('<div>').addClass('spec_node');

	if( 'and' === specification.node || 'or' === specification.node ){
		if( 'and' === specification.node ){

			$new_div.text('And')
				.addClass('and_node');
		}
		else{

			$new_div.text('Or')
				.addClass('or_node');
		}

		$new_div.append( buildCompositeList( specification.specifications ) );
	}
	else if( 'type' === specification.node ){

		$new_div.text( 'Type: ' + specification.type )
			.addClass('type_node')
			.data( 'type', specification.type );
	}
	else if( 'flt' === specification.node ){

		$new_div.text( specification.field + ' < ' + specification.value )
			.addClass('flt_node')
			.data( 'field', specification.field )
			.data( 'value', specification.value );
	}
	else if( 'flte' === specification.node ){

		$new_div.text( specification.field + ' <= ' + specification.value )
			.addClass('flte_node')
			.data( 'field', specification.field )
			.data( 'value', specification.value );
	}

	$new_div.appendTo( $container );
}

function refreshFieldList( type ){

	$j('#field_bound_field').empty();
	loadFields(type, function(fields){
		$j.each(fields, function(index, field){
			$j('#field_bound_field').append( $j('<option>').attr('value', field).text(field) );
		});
	});
}

function pageInit(){

	if( '' != specificationId ){

		var specification = loadSpecification( displaySpecification );
		loadType(function( type ){
			$j('#object_select').val( type.toLowerCase() );
			refreshFieldList( type );
		});
		loadName(function( name ){
			$j('#specification_name').val( name );
		});
	}
}

function addToSpec( $list, $example ){

	var $list_el = $j('<li>'), spec = {};

	if( $example.hasClass('field_bound') ){

		spec.node = $example.find('#field_bound_operator').val();
		spec.field = $example.find('#field_bound_field').val();
		spec.value = $example.find('#field_bound_value').val();
	}
	else if( $example.hasClass('composite') ){

		spec.node = $example.find('#composite_operator').val();
		spec.specifications = [];
	}

	renderSpec( spec, $list_el );

	$list.append( $list_el );

	saveSpecification();
}

$j(function(){


	$j('#object_select').change( saveSObjectType );
	$j('#specification_name').change( saveName );

	$j('.example .handle').click(function(){

		addToSpec( $j('#specification_container ul').first(), $j( this ).closest('.example') );
	});

	pageInit();

});

	</script>
	<div id="specification">
		<h3><label for="specification_name">Spec Name</label></h3>
		<input type="text" id="specification_name" /><br />
		<h3><label for="object_select">Object Type</label></h3>
		<select id="object_select">
			<apex:repeat value="{!sObjectTypes}" var="sObjectType">
				<option value="{!sObjectType}">{!sObjectType}</option>
			</apex:repeat>
		</select>
		<h3>Componenents</h3>
		<div id="specification_container">
		</div>
	</div>
	<div id="specification_palette">
		<div class="type">
			<h4 class="name">Field Bound Specification</h4>
			<div class="example field_bound">
				<div class="handle">+</div>
				<select id="field_bound_field">
				</select>
				<select id="field_bound_operator">
					<option value="flt" selected="selected">&lt;</option>
					<option value="flte">&lt;=</option>
				</select>
				<input type="text" id="field_bound_value" />
			</div>
		</div>
		<div class="type">
			<h4 class="name">Composite Specification</h4>
			<div class="example composite">
				<div class="handle">+</div>
				<select id="composite_operator">
					<option value="or" selected="selected">Or</option>
					<option value="and">And</option>
				</select>
			</div>
		</div>
	</div>
</apex:page>